import constants
import requests
import json
from time import sleep
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from collections import defaultdict


class TwitchSetup:
    def __init__(self, driver):
        self.driver = driver
    
    def login(self, username, password):
        # Go to twitch.tv
        self.driver.get('http:twitch.tv')
        sleep(5)

        # Click on log in button
        log_in_btn = self.driver.find_element_by_xpath('//div[@data-a-target="tw-core-button-label-text"]')
        log_in_btn.click()
        sleep(5)

        # Input login info
        username_field = self.driver.find_element_by_xpath('//input[@id="login-username"]')
        pw_field = self.driver.find_element_by_xpath('//input[@id="password-input"]')
        username_field.send_keys(username)
        pw_field.send_keys(password)

        self.driver.find_element_by_xpath('//button[@data-a-target="passport-login-button"]').click()
        sleep(5)
    
    def adjust_settings(self):
        # Click settings icon
        self.driver.find_element_by_xpath('//button[@data-a-target="user-menu-toggle"]').click()
        sleep(1)
        # Click BTTV option 
        self.driver.find_element_by_xpath('//a[@title="BetterTTV Settings"]').click()
        sleep(1)
        # Enable GIF Emotes and Emotes Menu options
        bttv_gifs = self.driver.find_element_by_css_selector('div.bttvOption-bttvGIFEmotes')
        bttv_gifs.find_element_by_class_name('bttv-switch-label-on').click()
        self.driver.find_element_by_xpath('//label[@for="clickTwitchEmotesTrue"]').click()

    def get_twitch_stream(self, channel):
        sleep(1)
        return TwitchStream(self.driver, channel)
    

class TwitchStream:

    def __init__(self, driver, channel):
        self.driver = driver
        self.channel = channel
        
        # Go to channel, click on bttv emote menu, get all the emote types and store
        self.driver.get(f'https://www.twitch.tv/{self.channel}')
        sleep(5)
        self.driver.find_element_by_id('emote-menu-button').click()
        sleep(1)
        self.emote_types = self.driver.find_elements_by_class_name('group-header')
        self.channel_emotes_3rd_party = defaultdict(set)
        self.channel_emotes = defaultdict(set)

    # Loop through emote types, get emotes for all third party emotes and store in dictionary
    def get_channel_3rd_party_emotes(self):
        for emote_type in self.emote_types:
            if emote_type.text == 'BetterTTV Channel Emotes' or emote_type.text.lower() == f'frankerfacez channel: {self.channel}':
                third_party_emotes = emote_type.find_elements_by_class_name('emote.third-party')
                for emote in third_party_emotes:
                    self.channel_emotes_3rd_party[emote_type.text].add(emote.get_attribute('data-emote'))

    # Loop through emote types, get emotes for all third party emotes and store in dictionary
    def get_global_emotes(self):
        self.global_emotes = defaultdict(set)
        for emote_type in self.emote_types:
            if 'Global' in emote_type.text:
                global_emotes = emote_type.find_elements_by_class_name('emote')
                for emote in global_emotes:
                    self.global_emotes[emote_type.text].add(emote.get_attribute('data-emote'))
    

    # Get channel id from twitch API
    def _get_channel_id(self):
        url = f'https://api.twitch.tv/helix/users?login={self.channel}'
        headers = {'Authorization': constants.twitch_bearer_token, 'Client-ID': constants.twitch_client_id}
        req = requests.get(url, headers=headers)
        self.channel_id = json.loads(req.content)['data'][0]['id']
    

    # Get all channel emotes and add them to emote dict under corresponding emote tier 
    def get_channel_emotes(self):
        self._get_channel_id()
        req = requests.get(f'https://api.twitchemotes.com/api/v4/channels/{self.channel_id}')
        content = json.loads(req.content)
        content['plans']['Tier 1'] = content['plans'].pop('$4.99')
        content['plans']['Tier 2'] = content['plans'].pop('$9.99')
        content['plans']['Tier 3'] = content['plans'].pop('$24.99')
        tier_emote_dict = {v: k for k, v in content['plans'].items()}

        for emote in content['emotes']:
            self.channel_emotes[tier_emote_dict[str(emote['emoticon_set'])]].add(emote['code'])


def get_stream_emotes(streamers, twitch_driver):
    '''
    streamers: list of a streamers (in lowercase)
    twitch_driver: selenium chrome driver generated by TwitchSetup class
    For each streamer get channel emotes, and for first streamer in list get global emotes
    Returns list of emote dictionaries 
    '''
    streams = []
    for i, streamer in enumerate(streamers):
        stream = twitch_driver.get_twitch_stream(streamer)
        stream.get_channel_3rd_party_emotes()
        stream.get_channel_emotes()
        if i == 0:
            stream.get_global_emotes()
        streams.append(stream)
    return streams


def make_emote_dict(stream_emotes):
    emotes = {}
    for channel in stream_emotes:
        emotes[stream_emotes.channel] = {**stream_emotes.channel_emotes, **stream_emotes.channel_emotes_3rd_party}
    emotes['global'] = {**stream_emotes.global_emotes}
    return emotes
